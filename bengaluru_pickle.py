# -*- coding: utf-8 -*-
"""bengaluru_pickle.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dWeQIUj1vJJ-zdh22T3O8HNPjt5gH7Hw
"""
import pandas as pd
import numpy as np
import pickle
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import LabelEncoder, StandardScaler

# Load data
file_path = r"C:\Users\Indra\Downloads\Bengaluru_House_Data.csv"
data = pd.read_csv(file_path)

# Data cleaning and preprocessing (same as in your original script)
data['location'] = data['location'].fillna('Unknown')
data['size'] = data['size'].fillna(data['size'].mode()[0])
data['society'] = data['society'].fillna('Unknown')
data['bath'] = data['bath'].fillna(data['bath'].median())
data['balcony'] = data['balcony'].fillna(data['balcony'].median())

def convert_sqft_to_num(sqft):
    try:
        if '-' in sqft:
            sqft_range = sqft.split('-')
            return (float(sqft_range[0]) + float(sqft_range[1])) / 2
        return float(sqft)
    except:
        return None

data['total_sqft'] = data['total_sqft'].apply(convert_sqft_to_num)
data = data.dropna(subset=['total_sqft'])
data['price_per_sqft'] = data['price'] / data['total_sqft']
data['log_price'] = np.log1p(data['price'])
data['log_total_sqft'] = np.log1p(data['total_sqft'])

# Encode categorical columns
categorical_cols = ['area_type', 'availability', 'location', 'size', 'society']
encoder = LabelEncoder()
for col in categorical_cols:
    data[col] = encoder.fit_transform(data[col])

# Define features and target
X = data.drop(['price', 'log_price'], axis=1)
y = data['log_price']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Train the model
param_grid = {
    'n_estimators': [100, 200, 300],
    'max_depth': [10, 20, 30],
    'min_samples_split': [2, 5, 10]
}
rf_model = RandomForestRegressor(random_state=42)
grid_search = GridSearchCV(rf_model, param_grid, cv=5, scoring='neg_mean_squared_error', n_jobs=-1, verbose=1)
grid_search.fit(X_train_scaled, y_train)

best_rf_model = grid_search.best_estimator_

# Save the trained model
pickle_file = 'best_rf_model.pkl'
with open(pickle_file, 'wb') as file:
    pickle.dump(best_rf_model, file)

print(f"Model saved as {pickle_file}")

